<?php

namespace Proxies\__CG__\models\RBAC;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Group extends \models\RBAC\Group implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getUsers()
    {
        $this->__load();
        return parent::getUsers();
    }

    public function joinUser(\models\RBAC\User $user)
    {
        $this->__load();
        return parent::joinUser($user);
    }

    public function discharge(\models\RBAC\User $user)
    {
        $this->__load();
        return parent::discharge($user);
    }

    public function countMembers()
    {
        $this->__load();
        return parent::countMembers();
    }

    public function hasMembers()
    {
        $this->__load();
        return parent::hasMembers();
    }

    public function getRules()
    {
        $this->__load();
        return parent::getRules();
    }

    public function countRules()
    {
        $this->__load();
        return parent::countRules();
    }

    public function hasRules()
    {
        $this->__load();
        return parent::hasRules();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getGranular()
    {
        $this->__load();
        return parent::getGranular();
    }

    public function isGranular()
    {
        $this->__load();
        return parent::isGranular();
    }

    public function setGranular($boolean)
    {
        $this->__load();
        return parent::setGranular($boolean);
    }

    public function getImportance()
    {
        $this->__load();
        return parent::getImportance();
    }

    public function setImportance($importance)
    {
        $this->__load();
        return parent::setImportance($importance);
    }

    public function getLeftValue()
    {
        $this->__load();
        return parent::getLeftValue();
    }

    public function setLeftValue($left_key)
    {
        $this->__load();
        return parent::setLeftValue($left_key);
    }

    public function getRightValue()
    {
        $this->__load();
        return parent::getRightValue();
    }

    public function setRightValue($right_key)
    {
        $this->__load();
        return parent::setRightValue($right_key);
    }

    public function setRootValue($root)
    {
        $this->__load();
        return parent::setRootValue($root);
    }

    public function getRootValue()
    {
        $this->__load();
        return parent::getRootValue();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function is_allowed($verb, $noun, $force_lookup = true)
    {
        $this->__load();
        return parent::is_allowed($verb, $noun, $force_lookup);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'granular', 'importance', 'lft', 'rgt', 'root', 'users', 'rules');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}